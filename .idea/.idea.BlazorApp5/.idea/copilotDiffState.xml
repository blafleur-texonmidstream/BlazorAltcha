<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/BlazorApp5/Components/App.razor">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/BlazorApp5/Components/App.razor" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;utf-8&quot;/&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;/&gt;&#10;    &lt;base href=&quot;/&quot;/&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;@Assets[&quot;lib/bootstrap/dist/css/bootstrap.min.css&quot;]&quot;/&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;@Assets[&quot;app.css&quot;]&quot;/&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;@Assets[&quot;BlazorApp5.styles.css&quot;]&quot;/&gt;&#10;    &lt;ImportMap/&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; href=&quot;favicon.png&quot;/&gt;&#10;    &lt;HeadOutlet @rendermode=&quot;InteractiveServer&quot;/&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;&lt;Routes @rendermode=&quot;InteractiveServer&quot;/&gt;&#10;&lt;script src=&quot;_framework/blazor.web.js&quot;&gt;&lt;/script&gt;&#10;&lt;script src=&quot;@Assets[&quot;js/altcha.min.js&quot;]&quot;&gt;&lt;/script&gt;&#10;&lt;script src=&quot;@Assets[&quot;js/altcha-functions.js&quot;]&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;utf-8&quot;/&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;/&gt;&#10;    &lt;base href=&quot;/&quot;/&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;@Assets[&quot;lib/bootstrap/dist/css/bootstrap.min.css&quot;]&quot;/&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;@Assets[&quot;app.css&quot;]&quot;/&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;@Assets[&quot;BlazorApp5.styles.css&quot;]&quot;/&gt;&#10;    &lt;ImportMap/&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; href=&quot;favicon.png&quot;/&gt;&#10;    &lt;HeadOutlet @rendermode=&quot;InteractiveServer&quot;/&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;&lt;Routes @rendermode=&quot;InteractiveServer&quot;/&gt;&#10;&lt;script src=&quot;_framework/blazor.web.js&quot;&gt;&lt;/script&gt;&#10;&lt;script type=&quot;module&quot; src=&quot;@Assets[&quot;js/altcha.min.js&quot;]&quot;&gt;&lt;/script&gt;&#10;&lt;script src=&quot;@Assets[&quot;js/altcha-functions.js&quot;]&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/BlazorApp5/Components/Pages/Home.razor">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/BlazorApp5/Components/Pages/Home.razor" />
              <option name="originalContent" value="@page &quot;/&quot;&#10;@using System.ComponentModel.DataAnnotations&#10;@inject IJSRuntime JSRuntime&#10;&#10;&lt;PageTitle&gt;Home&lt;/PageTitle&gt;&#10;&#10;&lt;h1&gt;Hello, world!&lt;/h1&gt;&#10;&#10;Welcome to your new app.&#10;&#10;&lt;div class=&quot;container mt-4&quot;&gt;&#10;    &lt;div class=&quot;row&quot;&gt;&#10;        &lt;div class=&quot;col-md-6&quot;&gt;&#10;            &lt;div class=&quot;card&quot;&gt;&#10;                &lt;div class=&quot;card-header&quot;&gt;&#10;                    &lt;h3&gt;Contact Form with Altcha&lt;/h3&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;EditForm Model=&quot;@formModel&quot; OnValidSubmit=&quot;HandleValidSubmit&quot;&gt;&#10;                        &lt;DataAnnotationsValidator /&gt;&#10;                        &lt;ValidationSummary /&gt;&#10;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;name&quot; class=&quot;form-label&quot;&gt;Name&lt;/label&gt;&#10;                            &lt;InputText id=&quot;name&quot; class=&quot;form-control&quot; @bind-Value=&quot;formModel.Name&quot; /&gt;&#10;                            &lt;ValidationMessage For=&quot;@(() =&gt; formModel.Name)&quot; /&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;email&quot; class=&quot;form-label&quot;&gt;Email&lt;/label&gt;&#10;                            &lt;InputText id=&quot;email&quot; class=&quot;form-control&quot; @bind-Value=&quot;formModel.Email&quot; /&gt;&#10;                            &lt;ValidationMessage For=&quot;@(() =&gt; formModel.Email)&quot; /&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;message&quot; class=&quot;form-label&quot;&gt;Message&lt;/label&gt;&#10;                            &lt;InputTextArea id=&quot;message&quot; class=&quot;form-control&quot; @bind-Value=&quot;formModel.Message&quot; rows=&quot;4&quot; /&gt;&#10;                            &lt;ValidationMessage For=&quot;@(() =&gt; formModel.Message)&quot; /&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;!-- Altcha widget --&gt;&#10;                            &lt;altcha-widget &#10;                                id=&quot;altcha-widget&quot; &#10;                                class=&quot;w-100&quot; &#10;                                data-callback=&quot;altchaVerified&quot; &#10;                                data-name=&quot;altcha-token&quot;&#10;                                data-auto=&quot;onsubmit&quot;&#10;                                data-test=&quot;true&quot;&#10;                                challengeurl=&quot;https://api.altcha.org/challenge&quot;&#10;                                data-challengeurl=&quot;https://api.altcha.org/challenge&quot;&gt;&#10;                            &lt;/altcha-widget&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Submit&lt;/button&gt;&#10;                    &lt;/EditForm&gt;&#10;&#10;                    @if (!string.IsNullOrEmpty(submitMessage))&#10;                    {&#10;                        &lt;div class=&quot;alert alert-info mt-3&quot;&gt;&#10;                            @submitMessage&#10;                        &lt;/div&gt;&#10;                    }&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;@code {&#10;    private FormModel formModel = new();&#10;    private string submitMessage = string.Empty;&#10;    &#10;    private async Task HandleValidSubmit()&#10;    {&#10;        try&#10;        {&#10;            // Get the Altcha token from the widget&#10;            var token = await JSRuntime.InvokeAsync&lt;string&gt;(&quot;getAltchaToken&quot;);&#10;            &#10;            if (string.IsNullOrEmpty(token))&#10;            {&#10;                submitMessage = &quot;Please complete the CAPTCHA verification&quot;;&#10;                return;&#10;            }&#10;            &#10;            // Form submission logic would go here&#10;            // In a real app, you would validate the token on the server&#10;            &#10;            submitMessage = $&quot;Thank you, {formModel.Name}! Your message has been submitted.&quot;;&#10;            formModel = new FormModel(); // Reset form&#10;            &#10;            // Reset the Altcha widget for next submission&#10;            await JSRuntime.InvokeAsync&lt;object&gt;(&quot;resetAltcha&quot;);&#10;        }&#10;        catch (Exception ex)&#10;        {&#10;            submitMessage = $&quot;Error: {ex.Message}&quot;;&#10;        }&#10;    }&#10;&#10;    public class FormModel&#10;    {&#10;        [Required]&#10;        [StringLength(100, ErrorMessage = &quot;Name is too long.&quot;)]&#10;        public string Name { get; set; } = string.Empty;&#10;        &#10;        [Required]&#10;        [EmailAddress]&#10;        public string Email { get; set; } = string.Empty;&#10;        &#10;        [Required]&#10;        [StringLength(1000, ErrorMessage = &quot;Message is too long.&quot;)]&#10;        public string Message { get; set; } = string.Empty;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="@page &quot;/&quot;&#10;@using System.ComponentModel.DataAnnotations&#10;@inject IJSRuntime JSRuntime&#10;&#10;&lt;PageTitle&gt;Home&lt;/PageTitle&gt;&#10;&#10;&lt;h1&gt;Hello, world!&lt;/h1&gt;&#10;&#10;Welcome to your new app.&#10;&#10;&lt;div class=&quot;container mt-4&quot;&gt;&#10;    &lt;div class=&quot;row&quot;&gt;&#10;        &lt;div class=&quot;col-md-6&quot;&gt;&#10;            &lt;div class=&quot;card&quot;&gt;&#10;                &lt;div class=&quot;card-header&quot;&gt;&#10;                    &lt;h3&gt;Contact Form with Altcha&lt;/h3&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;EditForm Model=&quot;@formModel&quot; OnValidSubmit=&quot;HandleValidSubmit&quot;&gt;&#10;                        &lt;DataAnnotationsValidator /&gt;&#10;                        &lt;ValidationSummary /&gt;&#10;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;name&quot; class=&quot;form-label&quot;&gt;Name&lt;/label&gt;&#10;                            &lt;InputText id=&quot;name&quot; class=&quot;form-control&quot; @bind-Value=&quot;formModel.Name&quot; /&gt;&#10;                            &lt;ValidationMessage For=&quot;@(() =&gt; formModel.Name)&quot; /&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;email&quot; class=&quot;form-label&quot;&gt;Email&lt;/label&gt;&#10;                            &lt;InputText id=&quot;email&quot; class=&quot;form-control&quot; @bind-Value=&quot;formModel.Email&quot; /&gt;&#10;                            &lt;ValidationMessage For=&quot;@(() =&gt; formModel.Email)&quot; /&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;message&quot; class=&quot;form-label&quot;&gt;Message&lt;/label&gt;&#10;                            &lt;InputTextArea id=&quot;message&quot; class=&quot;form-control&quot; @bind-Value=&quot;formModel.Message&quot; rows=&quot;4&quot; /&gt;&#10;                            &lt;ValidationMessage For=&quot;@(() =&gt; formModel.Message)&quot; /&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;!-- Altcha widget --&gt;&#10;                            &lt;altcha-widget &#10;                                id=&quot;altcha-widget&quot; &#10;                                class=&quot;w-100&quot; &#10;                                data-callback=&quot;altchaVerified&quot; &#10;                                data-name=&quot;altcha-token&quot;&#10;                                data-auto=&quot;onsubmit&quot;&#10;                                data-test=&quot;false&quot;&#10;                                challengeurl=&quot;/api/altcha/challenge&quot;&#10;                                verifyurl=&quot;/api/altcha/verify&quot;&gt;&#10;                            &lt;/altcha-widget&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Submit&lt;/button&gt;&#10;                    &lt;/EditForm&gt;&#10;&#10;                    @if (!string.IsNullOrEmpty(submitMessage))&#10;                    {&#10;                        &lt;div class=&quot;alert alert-info mt-3&quot;&gt;&#10;                            @submitMessage&#10;                        &lt;/div&gt;&#10;                    }&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;@code {&#10;    private FormModel formModel = new();&#10;    private string submitMessage = string.Empty;&#10;    &#10;    private async Task HandleValidSubmit()&#10;    {&#10;        try&#10;        {&#10;            // Get the Altcha token from the widget&#10;            var token = await JSRuntime.InvokeAsync&lt;string&gt;(&quot;getAltchaToken&quot;);&#10;            &#10;            if (string.IsNullOrEmpty(token))&#10;            {&#10;                submitMessage = &quot;Please complete the CAPTCHA verification&quot;;&#10;                return;&#10;            }&#10;            &#10;            // Form submission logic would go here&#10;            // In a real app, you would validate the token on the server&#10;            &#10;            submitMessage = $&quot;Thank you, {formModel.Name}! Your message has been submitted.&quot;;&#10;            formModel = new FormModel(); // Reset form&#10;            &#10;            // Reset the Altcha widget for next submission&#10;            await JSRuntime.InvokeAsync&lt;object&gt;(&quot;resetAltcha&quot;);&#10;        }&#10;        catch (Exception ex)&#10;        {&#10;            submitMessage = $&quot;Error: {ex.Message}&quot;;&#10;        }&#10;    }&#10;&#10;    public class FormModel&#10;    {&#10;        [Required]&#10;        [StringLength(100, ErrorMessage = &quot;Name is too long.&quot;)]&#10;        public string Name { get; set; } = string.Empty;&#10;        &#10;        [Required]&#10;        [EmailAddress]&#10;        public string Email { get; set; } = string.Empty;&#10;        &#10;        [Required]&#10;        [StringLength(1000, ErrorMessage = &quot;Message is too long.&quot;)]&#10;        public string Message { get; set; } = string.Empty;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/BlazorApp5/Controllers/AltchaController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/BlazorApp5/Controllers/AltchaController.cs" />
              <option name="originalContent" value="using System.Security.Cryptography;&#10;using System.Text;&#10;using Microsoft.AspNetCore.Mvc;&#10;&#10;namespace BlazorApp5.Controllers;&#10;&#10;[ApiController]&#10;[Route(&quot;api/[controller]&quot;)]&#10;public class AltchaController : ControllerBase&#10;{&#10;    private static readonly Random Random = new();&#10;    &#10;    [HttpGet(&quot;challenge&quot;)]&#10;    public IActionResult GetChallenge()&#10;    {&#10;        // Generate a random salt&#10;        string salt = DateTime.UtcNow.ToString(&quot;yyyyMMddHHmmssfff&quot;) + Random.Next(10000, 99999);&#10;        &#10;        // Generate a random number between 1 and 1000&#10;        int number = Random.Next(1, 1000);&#10;        &#10;        // Calculate the challenge hash (SHA-256 of salt + number)&#10;        string challenge = ComputeSha256Hash(salt + number.ToString());&#10;        &#10;        // Return the challenge data&#10;        return Ok(new&#10;        {&#10;            algorithm = &quot;SHA-256&quot;,&#10;            challenge,&#10;            salt,&#10;            maxNumber = 1000,&#10;            signature = &quot;&quot; // Optional signature for enterprise use&#10;        });&#10;    }&#10;    &#10;    [HttpPost(&quot;verify&quot;)]&#10;    public IActionResult VerifyChallenge([FromBody] AltchaVerifyRequest request)&#10;    {&#10;        try&#10;        {&#10;            // Parse the payload (which contains the solution)&#10;            var payloadData = System.Text.Json.JsonSerializer.Deserialize&lt;AltchaPayload&gt;(&#10;                Encoding.UTF8.GetString(Convert.FromBase64String(request.Payload)));&#10;                &#10;            if (payloadData == null)&#10;            {&#10;                return BadRequest(new { verified = false, reason = &quot;Invalid payload&quot; });&#10;            }&#10;            &#10;            // Verify the challenge solution is correct&#10;            bool isValid = VerifySolution(payloadData);&#10;            &#10;            if (!isValid)&#10;            {&#10;                return Ok(new { verified = false, reason = &quot;Incorrect solution&quot; });&#10;            }&#10;            &#10;            return Ok(new { verified = true });&#10;        }&#10;        catch (Exception ex)&#10;        {&#10;            return BadRequest(new { verified = false, reason = ex.Message });&#10;        }&#10;    }&#10;    &#10;    private bool VerifySolution(AltchaPayload payload)&#10;    {&#10;        // If test mode is enabled, always return true&#10;        if (payload.Test == true)&#10;        {&#10;            return true;&#10;        }&#10;        &#10;        // Check if the solution (number) produces the expected challenge hash&#10;        string computedHash = ComputeSha256Hash(payload.Salt + payload.Number.ToString());&#10;        &#10;        // Compare the computed hash with the challenge hash&#10;        return string.Equals(computedHash, payload.Challenge, StringComparison.OrdinalIgnoreCase);&#10;    }&#10;    &#10;    private static string ComputeSha256Hash(string text)&#10;    {&#10;        using var sha256 = SHA256.Create();&#10;        byte[] bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(text));&#10;        &#10;        var builder = new StringBuilder();&#10;        foreach (byte b in bytes)&#10;        {&#10;            builder.Append(b.ToString(&quot;x2&quot;));&#10;        }&#10;        return builder.ToString();&#10;    }&#10;}&#10;&#10;public class AltchaVerifyRequest&#10;{&#10;    public string Payload { get; set; } = string.Empty;&#10;    public string Code { get; set; } = string.Empty;&#10;}&#10;&#10;public class AltchaPayload&#10;{&#10;    public string Algorithm { get; set; } = string.Empty;&#10;    public string Challenge { get; set; } = string.Empty;&#10;    public int Number { get; set; }&#10;    public string Salt { get; set; } = string.Empty;&#10;    public string Signature { get; set; } = string.Empty;&#10;    public int Took { get; set; }&#10;    public bool? Test { get; set; }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Security.Cryptography;&#10;using System.Text;&#10;using Microsoft.AspNetCore.Mvc;&#10;&#10;namespace BlazorApp5.Controllers;&#10;&#10;[ApiController]&#10;[Route(&quot;api/[controller]&quot;)]&#10;public class AltchaController : ControllerBase&#10;{&#10;    private static readonly Random Random = new();&#10;    &#10;    [HttpGet(&quot;challenge&quot;)]&#10;    public IActionResult GetChallenge()&#10;    {&#10;        // Generate a random salt&#10;        string salt = DateTime.UtcNow.ToString(&quot;yyyyMMddHHmmssfff&quot;) + Random.Next(10000, 99999);&#10;        &#10;        // Generate a random number between 1 and 1000&#10;        int number = Random.Next(1, 1000);&#10;        &#10;        // Calculate the challenge hash (SHA-256 of salt + number)&#10;        string challenge = ComputeSha256Hash(salt + number.ToString());&#10;        &#10;        // Return the challenge data&#10;        return Ok(new&#10;        {&#10;            algorithm = &quot;SHA-256&quot;,&#10;            challenge,&#10;            salt,&#10;            maxNumber = 1000,&#10;            signature = &quot;&quot; // Optional signature for enterprise use&#10;        });&#10;    }&#10;    &#10;    [HttpPost(&quot;verify&quot;)]&#10;    public IActionResult VerifyChallenge([FromBody] AltchaVerifyRequest request)&#10;    {&#10;        try&#10;        {&#10;            // Parse the payload (which contains the solution)&#10;            var payloadData = System.Text.Json.JsonSerializer.Deserialize&lt;AltchaPayload&gt;(&#10;                Encoding.UTF8.GetString(Convert.FromBase64String(request.Payload)));&#10;                &#10;            if (payloadData == null)&#10;            {&#10;                return BadRequest(new { verified = false, reason = &quot;Invalid payload&quot; });&#10;            }&#10;            &#10;            // Verify the challenge solution is correct&#10;            bool isValid = VerifySolution(payloadData);&#10;            &#10;            if (!isValid)&#10;            {&#10;                return Ok(new { verified = false, reason = &quot;Incorrect solution&quot; });&#10;            }&#10;            &#10;            return Ok(new { verified = true });&#10;        }&#10;        catch (Exception ex)&#10;        {&#10;            return BadRequest(new { verified = false, reason = ex.Message });&#10;        }&#10;    }&#10;    &#10;    private bool VerifySolution(AltchaPayload payload)&#10;    {&#10;        // For production, you should disable test mode entirely&#10;        // This commented code is only for development&#10;        // if (payload.Test == true)&#10;        // {&#10;        //     return true;&#10;        // }&#10;        &#10;        // Check if the solution (number) produces the expected challenge hash&#10;        string computedHash = ComputeSha256Hash(payload.Salt + payload.Number.ToString());&#10;        &#10;        // Compare the computed hash with the challenge hash&#10;        return string.Equals(computedHash, payload.Challenge, StringComparison.OrdinalIgnoreCase);&#10;    }&#10;    &#10;    private static string ComputeSha256Hash(string text)&#10;    {&#10;        using var sha256 = SHA256.Create();&#10;        byte[] bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(text));&#10;        &#10;        var builder = new StringBuilder();&#10;        foreach (byte b in bytes)&#10;        {&#10;            builder.Append(b.ToString(&quot;x2&quot;));&#10;        }&#10;        return builder.ToString();&#10;    }&#10;}&#10;&#10;public class AltchaVerifyRequest&#10;{&#10;    public string Payload { get; set; } = string.Empty;&#10;    public string Code { get; set; } = string.Empty;&#10;}&#10;&#10;public class AltchaPayload&#10;{&#10;    public string Algorithm { get; set; } = string.Empty;&#10;    public string Challenge { get; set; } = string.Empty;&#10;    public int Number { get; set; }&#10;    public string Salt { get; set; } = string.Empty;&#10;    public string Signature { get; set; } = string.Empty;&#10;    public int Took { get; set; }&#10;    public bool? Test { get; set; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/BlazorApp5/Program.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/BlazorApp5/Program.cs" />
              <option name="originalContent" value="using BlazorApp5.Components;&#10;&#10;var builder = WebApplication.CreateBuilder(args);&#10;&#10;// Add services to the container.&#10;builder.Services.AddRazorComponents()&#10;    .AddInteractiveServerComponents();&#10;&#10;var app = builder.Build();&#10;&#10;// Configure the HTTP request pipeline.&#10;if (!app.Environment.IsDevelopment())&#10;{&#10;    app.UseExceptionHandler(&quot;/Error&quot;, createScopeForErrors: true);&#10;    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.&#10;    app.UseHsts();&#10;}&#10;&#10;app.UseHttpsRedirection();&#10;&#10;&#10;app.UseAntiforgery();&#10;&#10;app.MapStaticAssets();&#10;app.MapRazorComponents&lt;App&gt;()&#10;    .AddInteractiveServerRenderMode();&#10;&#10;app.Run();" />
              <option name="updatedContent" value="using BlazorApp5.Components;&#10;&#10;var builder = WebApplication.CreateBuilder(args);&#10;&#10;// Add services to the container.&#10;builder.Services.AddRazorComponents()&#10;    .AddInteractiveServerComponents();&#10;&#10;// Add controller support&#10;builder.Services.AddControllers();&#10;&#10;var app = builder.Build();&#10;&#10;// Configure the HTTP request pipeline.&#10;if (!app.Environment.IsDevelopment())&#10;{&#10;    app.UseExceptionHandler(&quot;/Error&quot;, createScopeForErrors: true);&#10;    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.&#10;    app.UseHsts();&#10;}&#10;&#10;app.UseHttpsRedirection();&#10;&#10;app.UseStaticFiles();&#10;app.UseAntiforgery();&#10;&#10;app.MapStaticAssets();&#10;app.MapRazorComponents&lt;App&gt;()&#10;    .AddInteractiveServerRenderMode();&#10;&#10;// Map controller endpoints&#10;app.MapControllers();&#10;&#10;app.Run();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/BlazorApp5/wwwroot/js/altcha-functions.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/BlazorApp5/wwwroot/js/altcha-functions.js" />
              <option name="originalContent" value="// JavaScript functions for Altcha integration&#10;window.initAltcha = function () {&#10;    if (typeof altchaInit === 'function') {&#10;        altchaInit();&#10;        console.log('Altcha initialized');&#10;    } else {&#10;        console.error('Altcha initialization function not found');&#10;        &#10;        // If altchaInit is not available, try to load the script dynamically&#10;        var script = document.createElement('script');&#10;        script.src = 'https://cdn.jsdelivr.net/npm/altcha@latest/dist/altcha.min.js';&#10;        script.onload = function() {&#10;            if (typeof altchaInit === 'function') {&#10;                altchaInit();&#10;                console.log('Altcha loaded and initialized');&#10;            } else {&#10;                console.error('Altcha could not be initialized after loading');&#10;            }&#10;        };&#10;        document.head.appendChild(script);&#10;    }&#10;};&#10;&#10;window.getAltchaToken = function () {&#10;    var tokenInput = document.querySelector('.altcha-token');&#10;    return tokenInput ? tokenInput.value : '';&#10;};&#10;&#10;window.resetAltcha = function () {&#10;    if (typeof altchaInit === 'function') {&#10;        altchaInit();&#10;        console.log('Altcha reset');&#10;    }&#10;};&#10;" />
              <option name="updatedContent" value="// JavaScript functions for Altcha integration&#10;window.initAltcha = function () {&#10;    console.log('Altcha widget should initialize automatically');&#10;    // No need to call altchaInit() - the web component initializes itself&#10;};&#10;&#10;window.getAltchaToken = function () {&#10;    // Look for the hidden input that contains the Altcha token&#10;    var tokenInput = document.querySelector('input[name=&quot;altcha-token&quot;]');&#10;    return tokenInput ? tokenInput.value : '';&#10;};&#10;&#10;window.resetAltcha = function () {&#10;    // Find the Altcha widget element&#10;    var altchaElement = document.querySelector('altcha-widget');&#10;    if (altchaElement) {&#10;        // Reset the Altcha widget by using the custom element's reset method&#10;        if (typeof altchaElement.reset === 'function') {&#10;            altchaElement.reset();&#10;            console.log('Altcha reset');&#10;        } else {&#10;            console.log('Altcha element found but no reset method available');&#10;        }&#10;    } else {&#10;        console.log('Altcha element not found');&#10;    }&#10;};&#10;&#10;// A callback function that Altcha can call when verification is complete&#10;window.altchaVerified = function(token) {&#10;    console.log('Altcha verification complete');&#10;    // You can add custom logic here if needed&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/BlazorApp5/wwwroot/js/altcha-interop.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/BlazorApp5/wwwroot/js/altcha-interop.js" />
              <option name="updatedContent" value="// This file contains JavaScript interop functions for Altcha integration&#10;window.altchaFunctions = {&#10;    initialize: function() {&#10;        // Check if Altcha script is loaded&#10;        if (typeof altchaInit === 'function') {&#10;            altchaInit();&#10;            console.log(&quot;Altcha initialized&quot;);&#10;        } else {&#10;            console.error(&quot;Altcha script not loaded or available&quot;);&#10;        }&#10;    },&#10;    getToken: function() {&#10;        return document.querySelector('.altcha-token')?.value || '';&#10;    }&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
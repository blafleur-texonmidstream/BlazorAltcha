@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<div @ref="altchaElement" class="altcha-placeholder @CssClass" id="@Id"></div>
<input @ref="hiddenInput" type="hidden" name="@Name" value="@Value" />

@code {
    [Parameter]
    public string Id { get; set; } = "altcha_" + Guid.NewGuid().ToString("N");
    
    [Parameter]
    public string CssClass { get; set; }
    
    [Parameter]
    public string ChallengeUrl { get; set; }
    
    [Parameter]
    public string VerifyUrl { get; set; }
    
    [Parameter]
    public string Name { get; set; } = "altcha";
    
    [Parameter]
    public bool Test { get; set; } = false;
    
    [Parameter]
    public string Value { get; set; }
    
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }
    
    [Parameter]
    public EventCallback<string> OnVerified { get; set; }
    
    public string CallbackName { get; private set; } = "altchaVerificationCallback_" + Guid.NewGuid().ToString("N");
    
    private ElementReference altchaElement;
    private ElementReference hiddenInput;
    private DotNetObjectReference<AltchaWidget> objRef;
    private IJSObjectReference module;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("AltchaWidget first render");
            
            // Load the non-module script
            await JSRuntime.InvokeVoidAsync("eval", "if (!window.altchaScriptsLoaded) { window.altchaScriptsLoaded = true; var script = document.createElement('script'); script.src = '/js/altcha-functions.js'; document.head.appendChild(script); }");
            
            // Wait a moment for the script to load
            await Task.Delay(300);
            
            // For debugging purposes
            Console.WriteLine($"Initializing ALTCHA with ChallengeUrl: {ChallengeUrl}, VerifyUrl: {VerifyUrl}, CallbackName: {CallbackName}");
            
            objRef = DotNetObjectReference.Create(this);
            
            try
            {
                await JSRuntime.InvokeVoidAsync("initAltcha", 
                    objRef, 
                    altchaElement, 
                    hiddenInput,
                    ChallengeUrl,
                    VerifyUrl,
                    CallbackName,
                    Test);
                
                Console.WriteLine("JavaScript initAltcha function called successfully");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing ALTCHA: {ex.Message}");
            }
        }
    }
    
    [JSInvokable]
    public async Task OnAltchaVerified(string token)
    {
        Console.WriteLine($"OnAltchaVerified called with token: {token?.Substring(0, Math.Min(20, token?.Length ?? 0))}...");
        
        // Set the Value property
        Value = token;
        
        // Trigger the ValueChanged event
        await ValueChanged.InvokeAsync(token);
        
        // Trigger the OnVerified event
        await OnVerified.InvokeAsync(token);
        
        // Ensure UI updates
        StateHasChanged();
        
        Console.WriteLine("OnAltchaVerified completed");
    }
    
    public async Task ResetAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("resetAltcha", altchaElement);
            Console.WriteLine("ALTCHA widget reset");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error resetting ALTCHA: {ex.Message}");
        }
    }
    
    public void Dispose()
    {
        objRef?.Dispose();
        module?.DisposeAsync();
    }
}
